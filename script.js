const firebaseConfig = {
    apiKey: "AIzaSyCcS5HMIhvsHkGq7hjjUYUtuPX8IlWtEs4",
    authDomain: "lear-9d1be.firebaseapp.com",
    projectId: "lear-9d1be",
    storageBucket: "lear-9d1be.firebasestorage.app",
    messagingSenderId: "739241285252",
    appId: "1:739241285252:web:b3f725bd09fe165bcc14d1",
    measurementId: "G-J44H9VDX6K",
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const db = firebase.firestore();

let currentUser = null;

// –î–æ–¥–∞—î–º–æ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
let lastQuestions = [];
const MIN_QUESTIONS_BEFORE_REPEAT = 5;

// –§—É–Ω–∫—Ü—ñ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
function signInAnonymously() {
    if (!auth) {
        console.error('Firebase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        return;
    }
    auth.signInAnonymously()
        .then(() => {
            // –û—á–∏—â–∞—î–º–æ localStorage –ø—Ä–∏ –≤—Ö–æ–¥—ñ
            localStorage.removeItem('learningProgress');
            showCelebration("üë§ –£–≤—ñ–π—à–ª–∏ —è–∫ –≥—ñ—Å—Ç—å!");
        })
        .catch((error) => {
            console.error("–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:", error);
            alert("–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        });
}

function signInWithGoogle() {
    if (!auth) {
        console.error('Firebase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        return;
    }
    const provider = new firebase.auth.GoogleAuthProvider();
    auth.signInWithPopup(provider)
        .then(() => {
            // –û—á–∏—â–∞—î–º–æ localStorage –ø—Ä–∏ –≤—Ö–æ–¥—ñ
            localStorage.removeItem('learningProgress');
            showCelebration("üìß –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ —á–µ—Ä–µ–∑ Google!");
        })
        .catch((error) => {
            console.error("–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Google:", error);
            alert("–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Google. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        });
}

function signOut() {
    auth.signOut().then(() => {
        showCelebration("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!");
        // –û—á–∏—â–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
        learnedLetters = [];
        learnedNumbers = [];
        score = 0;
        updateDisplay();
        updateProgress();
    });
}

// –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
auth.onAuthStateChanged((user) => {
    currentUser = user;
    updateAuthUI();

    if (user) {
        loadProgressFromCloud();
    } else {
        // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —É–≤—ñ–π—à–æ–≤, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
        loadProgressFromLocal();
    }
});

function updateAuthUI() {
    const authPanel = document.getElementById("authPanel");
    const userInfo = document.getElementById("userInfo");
    const userName = document.getElementById("userName");

    if (currentUser) {
        authPanel.style.display = "none";
        userInfo.style.display = "block";
        userName.textContent = currentUser.isAnonymous
            ? "üë§ –ì—ñ—Å—Ç—å"
            : `üìß ${currentUser.displayName || currentUser.email}`;
    } else {
        authPanel.style.display = "block";
        userInfo.style.display = "none";
    }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≤ —Ö–º–∞—Ä—É
async function saveProgressToCloud() {
    if (!currentUser) return;

    const progress = {
        learnedLetters: learnedLetters,
        learnedNumbers: learnedNumbers,
        score: score,
        targetScore: targetScore,
        currentTab: currentTab,
        lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),
    };

    try {
        await db.collection("userProgress").doc(currentUser.uid).set(progress);
        console.log("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:", error);
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑ —Ö–º–∞—Ä–∏
async function loadProgressFromCloud() {
    if (!currentUser) return;

    try {
        const doc = await db.collection("userProgress").doc(currentUser.uid).get();

        if (doc.exists) {
            const data = doc.data();
            // –ü–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–∞–Ω–∏–º–∏ –∑ Firebase
            learnedLetters = data.learnedLetters || [];
            learnedNumbers = data.learnedNumbers || [];
            score = data.score || 0;
            targetScore = data.targetScore || 0;
            currentTab = data.currentTab || "letters";
            
            updateUIBasedOnTab(currentTab);
            updateDisplay();
            updateProgress();
            showCelebration("üì• –ü—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
        }
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:", error);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≤ localStorage
function saveProgressToLocal() {
    const progress = {
        learnedLetters: learnedLetters,
        learnedNumbers: learnedNumbers,
        score: score,
        targetScore: targetScore,
        currentTab: currentTab
    };
    localStorage.setItem('learningProgress', JSON.stringify(progress));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑ localStorage
function loadProgressFromLocal() {
    const savedProgress = localStorage.getItem('learningProgress');
    if (savedProgress) {
        const progress = JSON.parse(savedProgress);
        learnedLetters = progress.learnedLetters || [];
        learnedNumbers = progress.learnedNumbers || [];
        score = progress.score || 0;
        targetScore = progress.targetScore || 0;
        currentTab = progress.currentTab || "letters";

        updateUIBasedOnTab(currentTab);
        updateDisplay();
        updateProgress();
    }
}


const ukrainianAlphabet = [
    {
        letter: "–ê",
        name: "–ê",
        sound: "–∞",
        emoji: "üçç",
        word: "–ê–Ω–∞–Ω–∞—Å",
        example: "–ê ‚Äî –∞–Ω–∞–Ω–∞—Å üçç",
    },
    {
        letter: "–ë",
        name: "–ë–µ",
        sound: "–±",
        emoji: "üêù",
        word: "–ë–¥–∂–æ–ª–∞",
        example: "–ë ‚Äî –±–¥–∂–æ–ª–∞ üêù",
    },
    {
        letter: "–í",
        name: "–í–µ",
        sound: "–≤",
        emoji: "üêª",
        word: "–í–µ–¥–º—ñ–¥—å",
        example: "–í ‚Äî –≤–µ–¥–º—ñ–¥—å üêª",
    },
    {
        letter: "–ì",
        name: "–ì–µ",
        sound: "–≥",
        emoji: "üéÉ",
        word: "–ì–∞—Ä–±—É–∑",
        example: "–ì ‚Äî –≥–∞—Ä–±—É–∑ üéÉ",
    },
    {
        letter: "“ê",
        name: "“ê–µ",
        sound: "“ë",
        emoji: "üîò",
        word: "“ê—É–¥–∑–∏–∫",
        example: "“ê ‚Äî “ë—É–¥–∑–∏–∫ üîò",
    },
    {
        letter: "–î",
        name: "–î–µ",
        sound: "–¥",
        emoji: "üçà",
        word: "–î–∏–Ω—è",
        example: "–î ‚Äî –¥–∏–Ω—è üçà",
    },
    {
        letter: "–ï",
        name: "–ï",
        sound: "–µ",
        emoji: "üöú",
        word: "–ï–∫—Å–∫–∞–≤–∞—Ç–æ—Ä",
        example: "–ï ‚Äî –µ–∫—Å–∫–∞–≤–∞—Ç–æ—Ä üöú",
    },
    {
        letter: "–Ñ",
        name: "–Ñ",
        sound: "—î",
        emoji: "ü¶ù",
        word: "–Ñ–Ω–æ—Ç",
        example: "–Ñ ‚Äî —î–Ω–æ—Ç ü¶ù",
    },
    {
        letter: "–ñ",
        name: "–ñ–µ",
        sound: "–∂",
        emoji: "ü¶í",
        word: "–ñ–∏—Ä–∞—Ñ–∞",
        example: "–ñ ‚Äî –∂–∏—Ä–∞—Ñ–∞ ü¶í",
    },
    {
        letter: "–ó",
        name: "–ó–µ",
        sound: "–∑",
        emoji: "üêç",
        word: "–ó–º—ñ—è",
        example: "–ó ‚Äî –∑–º—ñ—è üêç",
    },
    {
        letter: "–ò",
        name: "–ò",
        sound: "–∏",
        emoji: "üç¨",
        word: "–ò—Ä–∏—Å–∫–∞",
        example: "–ò ‚Äî —ñ—Ä–∏—Å–∫–∞ üç¨",
    },
    {
        letter: "–Ü",
        name: "–Ü",
        sound: "—ñ",
        emoji: "üß∏",
        word: "–Ü–≥—Ä–∞—à–∫–∞",
        example: "–Ü ‚Äî —ñ–≥—Ä–∞—à–∫–∞ üß∏",
    },
    {
        letter: "–á",
        name: "–á",
        sound: "—ó",
        emoji: "ü¶î",
        word: "–á–∂–∞–∫",
        example: "–á ‚Äî —ó–∂–∞–∫ ü¶î",
    },
    {
        letter: "–ô",
        name: "–ô–æ—Ç",
        sound: "–π",
        emoji: "ü•õ",
        word: "–ô–æ–≥—É—Ä—Ç",
        example: "–ô ‚Äî –π–æ–≥—É—Ä—Ç ü•õ",
    },
    {
        letter: "–ö",
        name: "–ö–∞",
        sound: "–∫",
        emoji: "üê±",
        word: "–ö—ñ—à–∫–∞",
        example: "–ö ‚Äî –∫—ñ—à–∫–∞ üê±",
    },
    {
        letter: "–õ",
        name: "–ï–ª",
        sound: "–ª",
        emoji: "üçã",
        word: "–õ–∏–º–æ–Ω",
        example: "–õ ‚Äî –ª–∏–º–æ–Ω üçã",
    },
    {
        letter: "–ú",
        name: "–ï–º",
        sound: "–º",
        emoji: "‚öΩ",
        word: "–ú'—è—á",
        example: "–ú ‚Äî –º'—è—á ‚öΩ",
    },
    {
        letter: "–ù",
        name: "–ï–Ω",
        sound: "–Ω",
        emoji: "ü¶è",
        word: "–ù–æ—Å–æ—Ä—ñ–≥",
        example: "–ù ‚Äî –Ω–æ—Å–æ—Ä—ñ–≥ ü¶è",
    },
    {
        letter: "–û",
        name: "–û",
        sound: "–æ",
        emoji: "‚úèÔ∏è",
        word: "–û–ª—ñ–≤–µ—Ü—å",
        example: "–û ‚Äî –æ–ª—ñ–≤–µ—Ü—å ‚úèÔ∏è",
    },
    {
        letter: "–ü",
        name: "–ü–µ",
        sound: "–ø",
        emoji: "üêº",
        word: "–ü–∞–Ω–¥–∞",
        example: "–ü ‚Äî –ø–∞–Ω–¥–∞ üêº",
    },
    {
        letter: "–†",
        name: "–ï—Ä",
        sound: "—Ä",
        emoji: "üêü",
        word: "–†–∏–±–∫–∞",
        example: "–† ‚Äî —Ä–∏–±–∫–∞ üêü",
    },
    {
        letter: "–°",
        name: "–ï—Å",
        sound: "—Å",
        emoji: "‚òÄÔ∏è",
        word: "–°–æ–Ω—Ü–µ",
        example: "–° ‚Äî —Å–æ–Ω—Ü–µ ‚òÄÔ∏è",
    },
    {
        letter: "–¢",
        name: "–¢–µ",
        sound: "—Ç",
        emoji: "üêØ",
        word: "–¢–∏–≥—Ä",
        example: "–¢ ‚Äî —Ç–∏–≥—Ä üêØ",
    },
    {
        letter: "–£",
        name: "–£",
        sound: "—É",
        emoji: "üå™Ô∏è",
        word: "–£—Ä–∞–≥–∞–Ω",
        example: "–£ ‚Äî —É—Ä–∞–≥–∞–Ω üå™Ô∏è",
    },
    {
        letter: "–§",
        name: "–ï—Ñ",
        sound: "—Ñ",
        emoji: "ü¶©",
        word: "–§–ª–∞–º—ñ–Ω–≥–æ",
        example: "–§ ‚Äî —Ñ–ª–∞–º—ñ–Ω–≥–æ ü¶©",
    },
    {
        letter: "–•",
        name: "–•–∞",
        sound: "—Ö",
        emoji: "‚òÅÔ∏è",
        word: "–•–º–∞—Ä–∏–Ω–∫–∞",
        example: "–• ‚Äî —Ö–º–∞—Ä–∏–Ω–∫–∞ ‚òÅÔ∏è",
    },
    {
        letter: "–¶",
        name: "–¶–µ",
        sound: "—Ü",
        emoji: "üç≠",
        word: "–¶—É–∫–µ—Ä–∫–∞",
        example: "–¶ ‚Äî —Ü—É–∫–µ—Ä–∫–∞ üç≠",
    },
    {
        letter: "–ß",
        name: "–ß–µ",
        sound: "—á",
        emoji: "üê¢",
        word: "–ß–µ—Ä–µ–ø–∞—Ö–∞",
        example: "–ß ‚Äî —á–µ—Ä–µ–ø–∞—Ö–∞ üê¢",
    },
    {
        letter: "–®",
        name: "–®–∞",
        sound: "—à",
        emoji: "üç´",
        word: "–®–æ–∫–æ–ª–∞–¥",
        example: "–® ‚Äî —à–æ–∫–æ–ª–∞–¥ üç´",
    },
    {
        letter: "–©",
        name: "–©–∞",
        sound: "—â",
        emoji: "üê∂",
        word: "–©–µ–Ω—è",
        example: "–© ‚Äî —â–µ–Ω—è üê∂",
    },
    {
        letter: "–¨",
        name: "–ú'—è–∫–∏–π –∑–Ω–∞–∫",
        sound: "—å",
        emoji: "üê¥",
        word: "–ú'—è–∫–∏–π –∑–Ω–∞–∫",
        example: "–¨ ‚Äî –º'—è–∫–∏–π –∑–Ω–∞–∫ üê¥",
    },
    {
        letter: "–Æ",
        name: "–Æ",
        sound: "—é",
        emoji: "ü™ê",
        word: "–Æ–ø—ñ—Ç–µ—Ä",
        example: "–Æ ‚Äî —é–ø—ñ—Ç–µ—Ä ü™ê",
    },
    {
        letter: "–Ø",
        name: "–Ø",
        sound: "—è",
        emoji: "üçì",
        word: "–Ø–≥–æ–¥–∞",
        example: "–Ø ‚Äî —è–≥–æ–¥–∞ üçì",
    },
];

const ukrainianNumbers = [
    {
        number: "0",
        name: "–Ω—É–ª—å",
        emoji: "0Ô∏è‚É£",
        word: "–ù—É–ª—å",
        example: "0 ‚Äî –Ω—É–ª—å 0Ô∏è‚É£",
    },
    {
        number: "1",
        name: "–æ–¥–∏–Ω",
        emoji: "1Ô∏è‚É£",
        word: "–û–¥–∏–Ω",
        example: "1 ‚Äî –æ–¥–∏–Ω 1Ô∏è‚É£",
    },
    {
        number: "2",
        name: "–¥–≤–∞",
        emoji: "2Ô∏è‚É£",
        word: "–î–≤–∞",
        example: "2 ‚Äî –¥–≤–∞ 2Ô∏è‚É£",
    },
    {
        number: "3",
        name: "—Ç—Ä–∏",
        emoji: "3Ô∏è‚É£",
        word: "–¢—Ä–∏",
        example: "3 ‚Äî —Ç—Ä–∏ 3Ô∏è‚É£",
    },
    {
        number: "4",
        name: "—á–æ—Ç–∏—Ä–∏",
        emoji: "4Ô∏è‚É£",
        word: "–ß–æ—Ç–∏—Ä–∏",
        example: "4 ‚Äî —á–æ—Ç–∏—Ä–∏ 4Ô∏è‚É£",
    },
    {
        number: "5",
        name: "–ø'—è—Ç—å",
        emoji: "5Ô∏è‚É£",
        word: "–ü'—è—Ç—å",
        example: "5 ‚Äî –ø'—è—Ç—å 5Ô∏è‚É£",
    },
    {
        number: "6",
        name: "—à—ñ—Å—Ç—å",
        emoji: "6Ô∏è‚É£",
        word: "–®—ñ—Å—Ç—å",
        example: "6 ‚Äî —à—ñ—Å—Ç—å 6Ô∏è‚É£",
    },
    {
        number: "7",
        name: "—Å—ñ–º",
        emoji: "7Ô∏è‚É£",
        word: "–°—ñ–º",
        example: "7 ‚Äî —Å—ñ–º 7Ô∏è‚É£",
    },
    {
        number: "8",
        name: "–≤—ñ—Å—ñ–º",
        emoji: "8Ô∏è‚É£",
        word: "–í—ñ—Å—ñ–º",
        example: "8 ‚Äî –≤—ñ—Å—ñ–º 8Ô∏è‚É£",
    },
    {
        number: "9",
        name: "–¥–µ–≤'—è—Ç—å",
        emoji: "9Ô∏è‚É£",
        word: "–î–µ–≤'—è—Ç—å",
        example: "9 ‚Äî –¥–µ–≤'—è—Ç—å 9Ô∏è‚É£",
    },
    {
        number: "10",
        name: "–¥–µ—Å—è—Ç—å",
        emoji: "üîü",
        word: "–î–µ—Å—è—Ç—å",
        example: "10 ‚Äî –¥–µ—Å—è—Ç—å üîü",
    },
];

let currentIndex = 0;
let learnedLetters = [];
let currentMode = "learning";
let score = 0;
let currentQuestion = null;
let isAutoPlay = false;
let buttonsLocked = false;
let selectedVoice = null;
let shuffledAlphabet = [];
let targetScore = 0; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 0 = –±–µ–∑ –ª—ñ–º—ñ—Ç—ñ–≤
let celebrationAudio = null;
let currentTab = "letters"; // 'letters' –∞–±–æ 'numbers'
let shuffledNumbers = [];
let learnedNumbers = [];

function shuffleAlphabet() {
    shuffledAlphabet = [...ukrainianAlphabet];
    for (let i = shuffledAlphabet.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffledAlphabet[i], shuffledAlphabet[j]] = [
            shuffledAlphabet[j],
            shuffledAlphabet[i],
        ];
    }
}

function shuffleNumbers() {
    shuffledNumbers = [...ukrainianNumbers];
    for (let i = shuffledNumbers.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffledNumbers[i], shuffledNumbers[j]] = [
            shuffledNumbers[j],
            shuffledNumbers[i],
        ];
    }
}

function getCurrentArray() {
    return currentTab === "letters" ? shuffledAlphabet : shuffledNumbers;
}

function getCurrentLearnedArray() {
    return currentTab === "letters" ? learnedLetters : learnedNumbers;
}

function initializeVoices() {
    const voices = speechSynthesis.getVoices();
    const ukrainianVoices = voices.filter(
        (voice) =>
            voice.lang.includes("uk") ||
            voice.name.toLowerCase().includes("ukrain"),
    );

    if (ukrainianVoices.length > 0) {
        selectedVoice = ukrainianVoices[0];
    } else {
        const femaleVoices = voices.filter(
            (voice) =>
                voice.name.toLowerCase().includes("female") ||
                voice.name.toLowerCase().includes("woman") ||
                voice.name.toLowerCase().includes("anna") ||
                voice.name.toLowerCase().includes("maria"),
        );

        if (femaleVoices.length > 0) {
            selectedVoice = femaleVoices[0];
        } else {
            selectedVoice = voices[0];
        }
    }
    console.log("–û–±—Ä–∞–Ω–∏–π –≥–æ–ª–æ—Å:", selectedVoice?.name);
}

// –î–æ–¥–∞—é —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è –∑–≤—É–∫—É –¥–ª—è –±—É–∫–≤–∏/—Ü–∏—Ñ—Ä–∏
function playItemSound(item) {
    if (currentTab === "letters" && item.sound) {
        const audio = new Audio(`sounds/ua/letters/${item.sound}.wav`);
        audio.play().catch(() => speakFallback(item.letter, item.word));
    } else {
        // –î–ª—è —Ü–∏—Ñ—Ä –∞–±–æ —è–∫—â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—É ‚Äî —Å–∏–Ω—Ç–µ–∑
        speakFallback(currentTab === "letters" ? item.letter : item.number, item.word);
    }
}

function generateQuestion() {
    buttonsLocked = false;
    const originalArray = getOriginalArray();
    
    let availableQuestions = originalArray.filter(item => {
        const itemValue = currentTab === "letters" ? item.letter : item.number;
        return !lastQuestions.includes(itemValue);
    });

    if (availableQuestions.length === 0) {
        lastQuestions = [];
        availableQuestions = originalArray;
    }

    const randomIndex = Math.floor(Math.random() * availableQuestions.length);
    const correctItem = availableQuestions[randomIndex];
    const itemValue = currentTab === "letters" ? correctItem.letter : correctItem.number;
    lastQuestions.push(itemValue);
    
    if (lastQuestions.length > MIN_QUESTIONS_BEFORE_REPEAT) {
        lastQuestions.shift();
    }

    currentQuestion = correctItem;

    document.getElementById("questionEmoji").textContent = correctItem.emoji;
    const questionType = currentTab === "letters" ? "–±—É–∫–≤—É" : "—Ü–∏—Ñ—Ä—É";
    document.getElementById("questionText").textContent = `–Ø–∫–∞ —Ü–µ ${questionType}? (${correctItem.word})`;

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è –∑–≤—É–∫—É
    playItemSound(correctItem);

    const emoji = document.getElementById("questionEmoji");
    emoji.style.transform = "scale(1.2)";
    emoji.style.filter = "brightness(1.3)";

    setTimeout(() => {
        emoji.style.transform = "scale(1)";
        emoji.style.filter = "brightness(1)";
    }, 800);

    generateAnswerOptions(correctItem);
}

function getOriginalArray() {
    return currentTab === "letters" ? ukrainianAlphabet : ukrainianNumbers;
}

function generateAnswerOptions(correctItem) {
    const options = [correctItem];
    const originalArray = getOriginalArray();

    while (options.length < 5) {
        const randomItem = originalArray[Math.floor(Math.random() * originalArray.length)];
        const isDuplicate = options.some((option) => {
            const optionValue = currentTab === "letters" ? option.letter : option.number;
            const randomValue = currentTab === "letters" ? randomItem.letter : randomItem.number;
            return optionValue === randomValue;
        });

        if (!isDuplicate) {
            options.push(randomItem);
        }
    }

    options.sort(() => Math.random() - 0.5);

    const container = document.getElementById("answerOptions");
    container.innerHTML = "";

    options.forEach((option) => {
        const btn = document.createElement("button");
        btn.className = "answer-btn";
        btn.textContent = currentTab === "letters" ? option.letter : option.number;
        btn.onclick = () => checkAnswer(option, btn);
        container.appendChild(btn);
    });
}

function checkAnswer(selectedItem, buttonElement) {
    if (buttonsLocked) return;

    const currentValue = currentTab === "letters" ? selectedItem.letter : selectedItem.number;
    const correctValue = currentTab === "letters" ? currentQuestion.letter : currentQuestion.number;
    const isCorrect = currentValue === correctValue;

    if (isCorrect) {
        buttonsLocked = true;
        document.querySelectorAll(".answer-btn").forEach((btn) => {
            btn.disabled = true;
            btn.style.opacity = "0.6";
            btn.style.cursor = "not-allowed";
        });

        buttonElement.style.backgroundColor = "#00b894";
        buttonElement.style.color = "white";
        buttonElement.classList.add("correct");

        score += 10;
        showCelebration("üéâ –í—ñ—Ä–Ω–æ! üéâ", "correct");
        saveProgress();

        setTimeout(() => {
            generateQuestion();
        }, 1500);
    } else {
        buttonElement.style.backgroundColor = "#e17055";
        buttonElement.style.color = "white";
        buttonElement.classList.add("incorrect");

        score = Math.max(0, score - 10);
        showCelebration(`‚ùå –¶–µ ${currentValue} (${selectedItem.word}). –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!`, "incorrect");
        saveProgress();

        setTimeout(() => {
            buttonElement.style.backgroundColor = "rgba(255, 255, 255, 0.9)";
            buttonElement.style.color = "#2d3436";
            buttonElement.classList.remove("incorrect");
        }, 2000);
    }
    updateProgress();
}

function switchMode(mode) {
    currentMode = mode;
    lastQuestions = [];

    document.getElementById("learningBtn").classList.toggle("active", mode === "learning");
    document.getElementById("trainingBtn").classList.toggle("active", mode === "training");
    document.getElementById("learningMode").classList.toggle("active", mode === "learning");
    document.getElementById("trainingMode").classList.toggle("active", mode === "training");

    const scoreDisplay = document.getElementById("scoreDisplay");
    const targetScoreSetting = document.querySelector('.target-score-setting');
    
    if (mode === "training") {
        scoreDisplay.style.display = "block";
        targetScoreSetting.style.display = 'flex';
        updateProgress();
        generateQuestion();
    } else {
        scoreDisplay.style.display = "none";
        targetScoreSetting.style.display = 'none';
        updateDisplay();
    }
}

function updateDisplay() {
    const current = getCurrentArray()[currentIndex];
    if (!current) return;
    
    const displayValue = currentTab === "letters" ? current.letter : current.number;

    document.getElementById("currentLetter").textContent = displayValue;
    document.getElementById("emojiDisplay").textContent = current.emoji;
    document.getElementById("letterName").textContent = `${displayValue} - "${current.name}"`;
    document.getElementById("letterExample").textContent = current.example;
    document.getElementById("letterSound").textContent = `–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ ${currentTab === "letters" ? "–±—É–∫–≤—É" : "—Ü–∏—Ñ—Ä—É"} –∞–±–æ –µ–º–æ–¥–∑—ñ!`;
    
    updateProgress();
    updateAlphabetGrid();
    setupWritingArea();
}

function updateProgress() {
    const learned = getCurrentLearnedArray().length;
    const total = getCurrentArray().length;
    const percentage = total > 0 ? (learned / total) * 100 : 0;

    document.getElementById("progressFill").style.width = percentage + "%";
    document.getElementById("progressText").textContent = `–ü—Ä–æ–≥—Ä–µ—Å: ${learned}/${total}`;

    const scoreDisplay = document.getElementById("scoreDisplay");
    if (currentMode === "training") {
        scoreDisplay.style.display = 'block';
        if (targetScore > 0) {
            scoreDisplay.textContent = `–†–∞—Ö—É–Ω–æ–∫: ${score}/${targetScore}`;
            if (score >= targetScore) {
                setTimeout(showVictoryScreen, 500);
            }
        } else {
            scoreDisplay.textContent = `–†–∞—Ö—É–Ω–æ–∫: ${score}`;
        }
    } else {
        scoreDisplay.style.display = 'none';
    }
}

function updateAlphabetGrid() {
    const grid = document.getElementById("alphabetGrid");
    grid.innerHTML = "";
    const originalArray = getOriginalArray();
    const learnedArray = getCurrentLearnedArray();
    const currentArray = getCurrentArray();

    originalArray.forEach((item) => {
        const btn = document.createElement("button");
        btn.className = "alphabet-btn";
        const itemValue = currentTab === "letters" ? item.letter : item.number;
        btn.textContent = itemValue;

        btn.onclick = () => {
            const shuffledIndex = currentArray.findIndex(shuffledItem => {
                const shuffledValue = currentTab === "letters" ? shuffledItem.letter : shuffledItem.number;
                return shuffledValue === itemValue;
            });
            if (shuffledIndex !== -1) {
                currentIndex = shuffledIndex;
                updateDisplay();
                playSound();
                if (currentTab === "letters") {
                    practiceWriting(item.letter);
                }
            }
        };

        if (learnedArray.includes(itemValue)) {
            btn.classList.add("learned");
        }
        grid.appendChild(btn);
    });
}

function switchTab(tab) {
    currentTab = tab;
    lastQuestions = [];
    currentIndex = 0;

    updateUIBasedOnTab(tab);
    
    if (currentMode === "training") {
        generateQuestion();
    } else {
        updateDisplay();
    }
    
    updateProgress();
    saveProgress();
}

function updateUIBasedOnTab(tab) {
    document.getElementById("lettersTab").classList.toggle("active", tab === "letters");
    document.getElementById("numbersTab").classList.toggle("active", tab === "numbers");

    const writingArea = document.getElementById("writingArea");
    if (tab === 'letters' && currentMode === 'learning') {
        writingArea.style.display = 'flex';
        setupWritingArea();
    } else {
        writingArea.style.display = 'none';
    }

    document.getElementById("targetScoreInput").value = targetScore;
    const scoreDisplay = document.getElementById("scoreDisplay");
    if (targetScore > 0) {
        scoreDisplay.textContent = `–†–∞—Ö—É–Ω–æ–∫: ${score}/${targetScore}`;
    } else {
        scoreDisplay.textContent = `–†–∞—Ö—É–Ω–æ–∫: ${score}`;
    }
}


function playSound() {
    const current = getCurrentArray()[currentIndex];
    const displayValue = currentTab === "letters" ? current.letter : current.number;

    if (currentTab === "letters" && current.sound) {
        const audio = new Audio(`sounds/ua/letters/${current.sound}.wav`);
        audio.play().catch(() => speakFallback(displayValue, current.word));
    } else {
        speakFallback(displayValue, current.word);
    }

    const letter = document.getElementById("currentLetter");
    letter.style.transform = "scale(1.2)";
    setTimeout(() => { letter.style.transform = "scale(1)"; }, 500);
}

function speakFallback(text, word) {
    if ("speechSynthesis" in window) {
        const utterance = new SpeechSynthesisUtterance(`${text}. ${word}.`);
        utterance.lang = "uk-UA";
        if (selectedVoice) utterance.voice = selectedVoice;
        speechSynthesis.speak(utterance);
    }
}

function setTargetScore() {
    const mathQuestion = Math.floor(Math.random() * 10) + 5;
    const mathAnswer = mathQuestion * 3;
    const userAnswer = prompt(`–ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å:\n–û–±—á–∏—Å–ª—ñ—Ç—å: ${mathQuestion} √ó 3 = ?`);

    if (parseInt(userAnswer) === mathAnswer) {
        targetScore = parseInt(document.getElementById("targetScoreInput").value, 10);
        showCelebration(targetScore === 0 ? "‚öôÔ∏è –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –±–µ–∑ –ª—ñ–º—ñ—Ç—ñ–≤" : `‚öôÔ∏è –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ü—ñ–ª—å: ${targetScore} –ø–æ—ó–Ω—Ç—ñ–≤`);
        updateProgress();
        saveProgress();
    } else {
        alert("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å!");
        document.getElementById("targetScoreInput").value = targetScore;
    }
}

function nextLetter() {
    currentIndex = (currentIndex + 1) % getCurrentArray().length;
    updateDisplay();
    playSound();
}

function previousLetter() {
    const arrLength = getCurrentArray().length;
    currentIndex = (currentIndex - 1 + arrLength) % arrLength;
    updateDisplay();
    playSound();
}

function markAsLearned() {
    const current = getCurrentArray()[currentIndex];
    const currentValue = currentTab === "letters" ? current.letter : current.number;
    const learnedArray = getCurrentLearnedArray();

    if (!learnedArray.includes(currentValue)) {
        learnedArray.push(currentValue);
        const itemType = currentTab === "letters" ? "–ë—É–∫–≤—É" : "–¶–∏—Ñ—Ä—É";
        showCelebration(`‚úÖ –ú–æ–ª–æ–¥–µ—Ü—å! ${itemType} –≤–∏–≤—á–µ–Ω–æ!`, "general");
        updateProgress();
        saveProgress();
        setTimeout(nextLetter, 1500);
    } else {
        showCelebration("üìö –í–∂–µ –≤–∏–≤—á–µ–Ω–æ!", "general");
    }
}

function showCelebration(message = "üéâ –ú–æ–ª–æ–¥–µ—Ü—å! üéâ", type = "general") {
    const celebration = document.createElement("div");
    celebration.className = `celebration ${type}`;
    celebration.textContent = message;
    document.body.appendChild(celebration);
    celebration.addEventListener("animationend", () => {
        if (document.body.contains(celebration)) {
            document.body.removeChild(celebration);
        }
    });
}

function saveProgress() {
    if (currentUser) {
        saveProgressToCloud();
    } else {
        saveProgressToLocal();
    }
}

function resetProgress() {
    if (confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∏–Ω—É—Ç–∏ –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å?")) {
        learnedLetters = [];
        learnedNumbers = [];
        score = 0;
        targetScore = 0;
        document.getElementById("targetScoreInput").value = "0";
        updateDisplay();
        updateProgress();
        saveProgress();
        showCelebration("üîÑ –ü—Ä–æ–≥—Ä–µ—Å —Å–∫–∏–Ω—É—Ç–æ!", "general");
    }
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è
function setupWritingArea() {
    const writingArea = document.getElementById('writingArea');
    if (!writingArea) return;

    if (currentTab === 'letters' && currentMode === 'learning') {
        writingArea.style.display = 'flex';
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É, –ª–∏—à–µ —è–∫—â–æ —Ç–∞–º —â–µ –Ω–µ–º–∞—î –ø–æ–ª–æ—Ç–Ω–∞
        if (!writingArea.querySelector('canvas')) {
            writingArea.innerHTML = '‚úèÔ∏è –ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è';
        }
    } else {
        writingArea.style.display = 'none';
    }
}

function handleWritingAreaClick() {
    const writingArea = document.getElementById('writingArea');
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ –∑ –±—É–∫–≤–∞–º–∏ —ñ —Ç–∞–º —â–µ –Ω–µ–º–∞—î –ø–æ–ª–æ—Ç–Ω–∞
    if (currentTab === 'letters' && !writingArea.querySelector('canvas')) {
        const currentLetter = getCurrentArray()[currentIndex]?.letter;
        if (currentLetter) {
            practiceWriting(currentLetter);
        }
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
document.addEventListener("DOMContentLoaded", () => {
    switchMode('learning'); // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ —Ä–µ–∂–∏–º—É –Ω–∞–≤—á–∞–Ω–Ω—è
    shuffleAlphabet();
    shuffleNumbers();
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É —ñ–Ω—ñ—Ü—ñ—é—î—Ç—å—Å—è —á–µ—Ä–µ–∑ onAuthStateChanged
});

speechSynthesis.addEventListener("voiceschanged", initializeVoices);
initializeVoices();